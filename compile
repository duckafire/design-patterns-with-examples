#!/usr/bin/env bash

declare -r COMPILATOR="g++"

#########################################################################################

if [[ $# -eq 0 ]]
then
	declare -r LF='\n'

	echo -e \
'compile <-g <group0>> <file0> [-g group] [fileN]'$LF\
' '$LF\
'Compile files present in a sub-directory from `patterns/`'$LF\
'(specified by `-g`) and store them in `bin/`.'$LF

	exit 0
fi

#########################################################################################

format_line_number()
{
	local num="${BASH_LINENO[0]}"

	case ${#num} in
		1) num="00$num" ;;
		2) num="0$num"  ;;
	esac

	echo "($num)"
}

fatal_error()
{
	echo -e '[\e[31mcompile: \e[31;1mERROR \e[0m\e[31m'"$(format_line_number)"'\e[0m]: '"$1"'.\n'
	exit 1
}

warn_error()
{
	echo -e '[\e[33mcompile: \e[33;1mWARNING \e[0m\e[33m'"$(format_line_number)"'\e[0m]: '"$1"'.'
}

success_msg()
{
	echo -e '[\e[32mcompile: \e[32;1mSUCCESS \e[0m\e[32m'"$(format_line_number)"'\e[0m]: '"$1"'.'
}

#########################################################################################

if [[ $# -lt 3 ]]
then
	fatal_error "Insufficient arguments (min: 3)"
fi

#########################################################################################

if ! type "$COMPILATOR" &> /dev/null
then
	fatal_error "Compilator ('$COMPILATOR') not found"
fi

declare -r DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
declare -r PAT_DIR="$DIR/patterns"
declare -r BIN_DIR="$DIR/bin"

declare -ri FALSE=1
declare -ri TRUE=0

declare group="$PAT_DIR/"
declare -i isgroup=$FALSE
declare -i invalidgroup=$FALSE
declare -i validgroupfound=$FALSE
declare -i hascppext=$FALSE

if [[ ! -d "$BIN_DIR" ]]
then
	mkdir "$BIN_DIR"
	success_msg "The binary directory was created"
fi

for arg in ${@}
do
	hascppext=$FALSE

	if [[ "$arg" = "-g" ]]
	then
		isgroup=$TRUE

		if [[ $invalidgroup -eq $TRUE ]]
		then
			validgroupfound=$TRUE
		fi

		invalidgroup=$FALSE
		continue
	fi

	if [[ $invalidgroup -eq $TRUE ]]
	then
		warn_error "File ('$arg.cpp') ignored"
		continue
	fi

	if [[ $isgroup -eq $TRUE ]]
	then
		if [[ ! -d "$PAT_DIR/$arg" ]]
		then
			warn_error "Group ('$arg/') not found. The next files will be ignored until that a valid group is found"
			invalidgroup=$TRUE
		fi

		if [[ $validgroupfound -eq $TRUE ]]
		then
			validgroupfound=$FALSE
			warn_error "A valid group ('$arg/') was found, the compilations can continue"
		fi

		isgroup=$FALSE
		group="$arg"
		continue
	fi

	if [[ "${arg: -4}" = ".cpp" ]]
	then
		warn_error "It is unnecessary to suffix the file name with '.cpp'"

		if [[ ${#arg} -lt 5 ]]
		then
			warn_error "Invalid file name ('$arg')"
			continue
		fi

		# foo.cpp -> foo
		arg="${arg: 0:${#arg}-4}"
	fi

	if [[ ! -f "$PAT_DIR/$group/$arg.cpp" ]]
	then
		warn_error "File ('patterns/$group/$arg.cpp') not found"
		continue
	fi

	if [[ ! -s "$PAT_DIR/$group/$arg.cpp" ]]
	then
		warn_error "Empty files ('patterns/$group/$arg.cpp') are invalid"
		continue
	fi

	#echo "$COMPILATOR /home/.../patterns/$group/$arg.cpp -o /home/.../bin/$arg"
	eval "$COMPILATOR $PAT_DIR/$group/$arg.cpp -o $BIN_DIR/$arg"

	if [[ $? -ne $TRUE ]]
	then
		warn_error "A compilation error occur"
	else
		success_msg "File ('patterns/$group/$arg.cpp' -> 'bin/$arg') compiled with success"
	fi
done

if [[ $isgroup -eq $TRUE ]]
then
	warn_error "Group not specified"
fi

exit 0

#########################################################################################
